app {
  host = "127.0.0.1"
  host = ${?ihavemoney_readback_host}
  port = 9201
  port = ${?ihavemoney_readback_port}
  system = "iHaveMoneyReadBackend"

  write-db {
    host = "127.0.0.1"
    host = ${?ihavemoney_writeback_db_host}
    port = "5432"
    port = ${?ihavemoney_writeback_db_port}
    name = "ihavemoney-write"
    name = ${?ihavemoney_writeback_db_name}
    user = "admin"
    user = ${?ihavemoney_writeback_db_user}
    password = "changeit"
    password = ${?ihavemoney_writeback_db_password}
  }

  read-db {
    host = "127.0.0.1"
    host = ${?ihavemoney_readback_db_host}
    port = "5432"
    port = ${?ihavemoney_readback_db_port}
    name = "ihavemoney-read"
    name = ${?ihavemoney_readback_db_name}
    user = "admin"
    user = ${?ihavemoney_readback_db_user}
    password = "changeit"
    password = ${?ihavemoney_readback_db_password}
  }
}

akka {

  loglevel = "INFO"

  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }

  actor {
    provider = "akka.remote.RemoteActorRefProvider"

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${app.host}
      port = ${app.port}
    }
  }

}

jdbc-journal {
  event-adapters {
    proto = "ru.pavkin.ihavemoney.serialization.adapters.ProtoEventAdapter"
  }
  event-adapter-bindings {
    "ru.pavkin.ihavemoney.proto.events.PBFortuneIncreased" = proto
    "ru.pavkin.ihavemoney.proto.events.PBFortuneSpent" = proto
    "ru.pavkin.ihavemoney.proto.events.PBFortuneCreated" = proto
    "ru.pavkin.ihavemoney.proto.events.PBEditorAdded" = proto
    "ru.pavkin.ihavemoney.proto.events.PBUserCreated" = proto
    "ru.pavkin.ihavemoney.proto.events.PBUserConfirmed" = proto
    "ru.pavkin.ihavemoney.proto.events.PBConfirmationEmailSent" = proto
    "ru.pavkin.ihavemoney.proto.events.PBUserLoggedIn" = proto
    "ru.pavkin.ihavemoney.proto.events.PBUserFailedToLogIn" = proto
    "ru.pavkin.ihavemoney.proto.events.PBFortuneInitializationFinished" = proto
    "ru.pavkin.ihavemoney.proto.events.PBAssetAcquired" = proto
    "ru.pavkin.ihavemoney.proto.events.PBAssetSold" = proto
    "ru.pavkin.ihavemoney.proto.events.PBAssetWorthChanged" = proto
    "ru.pavkin.ihavemoney.proto.events.PBLiabilityTaken" = proto
    "ru.pavkin.ihavemoney.proto.events.PBLiabilityPaidOff" = proto
  }
}

akka-persistence-jdbc {
  slick {
    driver = "slick.driver.PostgresDriver"
    db {
      url = "jdbc:postgresql://"${app.write-db.host}":"${app.write-db.port}"/"${app.write-db.name}
      user = ${app.write-db.user}
      password = ${app.write-db.password}
      driver = "org.postgresql.Driver"
      keepAliveConnection = on
      numThreads = 2
      queueSize = 100
    }
  }

  tables {
    journal {
      tableName = "journal"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
      }
    }

    deletedTo {
      tableName = "deleted_to"
      schemaName = ""
      columnNames = {
        persistenceId = "persistence_id"
        deletedTo = "deleted_to"
      }
    }

    snapshot {
      tableName = "snapshot"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        snapshot = "snapshot"
      }
    }
  }

  query {
    separator = ","
  }
}

read-db {
  url = "jdbc:postgresql://"${app.read-db.host}":"${app.read-db.port}"/"${app.read-db.name}
  user = ${app.read-db.user}
  password = ${app.read-db.password}
  driver = "org.postgresql.Driver"
  keepAliveConnection = on
  numThreads = 2
  queueSize = 100
}
